import{a as d,c as s,d as i}from"./chunk-SQZ4PAOL.mjs";var u=t=>{let r=t.skipNotification&&"?skipNotification=true"||"",e=t.card.cardType==="CREDIT"?"creditcards":"cards",n={...t.payload,query:r,flag:t.flag};return{input:t,metadata:{commandName:"SendAuthorizationToCore",path:`/${e}/${t.card.internalCardId}/authorization${r}`,method:"POST"},execute:async a=>{t.tenantId&&(a.tenantId=t.tenantId);let o=await i(a);try{return await o.post(`/${e}/${t.card.internalCardId}/authorization${r}`,n)}catch(c){s(c)}}}},C=t=>({input:t,metadata:{commandName:"UpdateCardID",path:`/clients/${t.clientId}`,method:"PUT"},execute:async r=>{t.tenantId&&(r.tenantId=t.tenantId);let e=await i(r);try{await e.put(`/clients/${t.clientId}`,{businessCardIDURL:t.businessCardIDURL,businessCardIDQRCode:t.businessCardIDQRCode})}catch(n){s(n)}}});import{print as m}from"graphql";var y=t=>({input:t,metadata:{commandName:t.operationName||"GraphQL",path:"/graphql",method:"POST"},execute:async r=>{t.tenantId&&(r.tenantId=t.tenantId);let e=await i(r),n=r.graphqlPath||"/graphql";try{let a=typeof t.command=="string"?t.command:m(t.command),{data:o}=await e.post(n,{query:a,variables:t.variables,operationName:t.operationName});if(o.errors?.length)throw d({message:o.errors[0].message,code:"graphql_error",originalError:o.errors[0]});if(!o.data)throw d({message:"No data returned from GraphQL query",code:"graphql_no_data"});return o.data}catch(a){throw a.name==="CommandError"?a:d({message:a.message,code:"graphql_request_failed",originalError:a})}}});export{u as a,C as b,y as c};
