import{A as R,B as v,D as B,M as O,N as E,O as L,P as T,a as C,r as g,s as w,t as b,u as h,w as U,x as q,y as P,z as A}from"./chunk-ZPWW7X3U.mjs";var I=u=>{let l=[];if(!u.baseUrl)l.push("baseUrl is required");else if(typeof u.baseUrl!="string")l.push("baseUrl must be a string");else try{new URL(u.baseUrl)}catch{l.push("baseUrl must be a valid URL")}return u.axiosConfig?.timeout!==void 0&&(typeof u.axiosConfig.timeout!="number"||u.axiosConfig.timeout<0)&&l.push("timeout must be a positive number"),l};var H=u=>{let l=I(u);if(l.length>0)throw C({message:`Invalid configuration: ${l.join(", ")}`,code:"invalid_config"});let y=async(r,t,n)=>{if(u.middlewares)for(let e of u.middlewares)r==="before"&&e.before?await e.before(t):r==="after"&&e.after?await e.after(t,n):r==="onError"&&e.onError&&await e.onError(t,n)},f={...u},a=async r=>{try{await y("before",r);let t=await r.execute(f);return await y("after",r,t),t}catch(t){throw await y("onError",r,t),t}},x=r=>{let t=r||f.tenantId;return{payment:{create:n=>{let e=g({payment:n,tenantId:t});return{execute:async()=>a(e)}},get:n=>{let e=w({id:n,tenantId:t});return{execute:async()=>a(e)}},update:(n,e)=>{let s=b({id:n,payment:e,tenantId:t});return{execute:async()=>a(s)}},delete:n=>{let e=U({id:n,tenantId:t});return{execute:async()=>a(e)}},list:()=>{let e=h({tenantId:t}).list(),s=c=>({where:c.where,limit:o=>{let m=c.limit(o);return s(m)},offset:o=>{let m=c.offset(o);return s(m)},all:()=>{let o=c.all();return s(o)},execute:async()=>{let o=c.execute();return a(o)}});return s(e)}},client:{create:n=>{let e=R({clientData:n,tenantId:t});return{execute:async()=>a(e)}},get:n=>{let e=q({clientId:n,tenantId:t});return{execute:async()=>a(e)}},update:(n,e)=>{let s=P({clientId:n,updates:e,tenantId:t});return{execute:async()=>a(s)}},updateDocumentRecord:(n,e)=>{let s=A({clientId:n,identifierId:e.id,updates:e,tenantId:t});return{execute:async()=>a(s)}},delete:n=>{let e=B({clientId:n,tenantId:t});return{execute:async()=>a(e)}},for:n=>{let e=parseInt(n,10),c=T({clientId:e,tenantId:t}).list(),o=async()=>{let i=c.execute();return(await a(i))?.savingsAccounts||[]},m=i=>({where:i.where,execute:async()=>{let d=i.execute();return a(d)}});return{accounts:{get:i=>({execute:async()=>{let d=O({id:i,tenantId:t});return a(d)}}),getFromList:i=>({execute:async()=>(await o()).find(p=>p.id===i)||null}),update:(i,d)=>{let p=E({clientId:e,accountId:i,updates:d,tenantId:t});return{execute:async()=>a(p)}},delete:i=>{let d=L({accountId:i,tenantId:t});return{execute:async()=>a(d)}},where:()=>({eq:()=>({list:()=>m(c)})}),list:()=>m(c)}}},list:()=>{let e=v({tenantId:t}).list(),s=c=>({where:c.where,limit:o=>{let m=c.limit(o);return s(m)},offset:o=>{let m=c.offset(o);return s(m)},all:()=>{let o=c.all();return s(o)},execute:async()=>{let o=c.execute();return a(o)}});return s(e)}}}};return{setConfig:r=>{f=r},updateConfig:r=>{let t={...f,...r,axiosConfig:{...f.axiosConfig,...r.axiosConfig,headers:{...f.axiosConfig?.headers,...r.axiosConfig?.headers}}},n=I(t);if(n.length>0)throw C({message:`Invalid configuration: ${n.join(", ")}`,code:"invalid_config"});f=t},resetConfig:()=>{f=u},request:a,tenant:r=>x(r),...x()}};export{H as a};
