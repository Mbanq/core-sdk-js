import{a as s,c as d,d as r}from"./chunk-RX3BFHHX.mjs";var I=t=>{let e=t.skipNotification&&"?skipNotification=true"||"",i=t.card.cardType==="CREDIT"?"creditcards":"cards",n={...t.payload,query:e,flag:t.flag};return{input:t,metadata:{commandName:"SendAuthorizationToCore",path:`/${i}/${t.card.internalCardId}/authorization${e}`,method:"POST"},execute:async a=>{t.tenantId&&(a.tenantId=t.tenantId);let o=await r(a);try{return await o.post(`/${i}/${t.card.internalCardId}/authorization${e}`,n)}catch(c){d(c)}}}},p=t=>({input:t,metadata:{commandName:"UpdateCardID",path:`/clients/${t.clientId}`,method:"PUT"},execute:async e=>{t.tenantId&&(e.tenantId=t.tenantId);let i=await r(e);try{await i.put(`/clients/${t.clientId}`,{businessCardIDURL:t.businessCardIDURL,businessCardIDQRCode:t.businessCardIDQRCode})}catch(n){d(n)}}});var h=t=>({input:t,metadata:{commandName:"GetClientData",path:`/v1/clients/${t.clientId}`,method:"GET"},execute:async e=>{t.tenantId&&(e.tenantId=t.tenantId);let i=await r(e),n={clientData:void 0,riskRatingData:void 0,clientAddressData:void 0,clientIdentifierData:void 0};try{return n.clientData=await i.get(`/v1/clients/${t.clientId}`),t.riskRating&&(n.riskRatingData=await i.get(`/v1/clients/${t.clientId}/riskrating`)),t.clientAddress&&(n.clientAddressData=await i.get(`/v1/client/${t.clientId}/addresses`)),t.clientIdentifier&&(n.clientIdentifierData=await i.get(`/v1/clients/${t.clientId}/identifiers?unmaskValue=true`)),n}catch(a){d(a)}}}),b=t=>({input:t,metadata:{commandName:"UpdateClient",path:`/v1/clients/${t.clientId}`,method:"PUT"},execute:async e=>{t.tenantId&&(e.tenantId=t.tenantId);let i=await r(e);try{return(await i.put(`/v1/clients/${t.clientId}`,{...t.updates})).data}catch(n){d(n)}}}),y=t=>({input:t,metadata:{commandName:"UpdateClientIdentifier",path:`/v1/clients/${t.clientId}/identifiers/${t.identifierId}`,method:"PUT"},execute:async e=>{t.tenantId&&(e.tenantId=t.tenantId);let i=await r(e);try{return(await i.put(`/v1/clients/${t.clientId}/identifiers/${t.identifierId}`,{...t.updates})).data}catch(n){d(n)}}});import{print as l}from"graphql";var $=t=>({input:t,metadata:{commandName:t.operationName||"GraphQL",path:"/graphql",method:"POST"},execute:async e=>{t.tenantId&&(e.tenantId=t.tenantId);let i=await r(e),n=e.graphqlPath||"/graphql";try{let a=typeof t.command=="string"?t.command:l(t.command),{data:o}=await i.post(n,{query:a,variables:t.variables,operationName:t.operationName});if(o.errors?.length)throw s({message:o.errors[0].message,code:"graphql_error",originalError:o.errors[0]});if(!o.data)throw s({message:"No data returned from GraphQL query",code:"graphql_no_data"});return o.data}catch(a){throw a.name==="CommandError"?a:s({message:a.message,code:"graphql_request_failed",originalError:a})}}});export{I as a,p as b,h as c,b as d,y as e,$ as f};
